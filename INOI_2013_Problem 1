// Solution to INOI Problem 1 by Manik Panwar. Follows a greedy strategy.
// Forward phase is coded a bit messy, but works. Can be improved by explicitly specifying for i=n-1 and i=n-2
// Link to paper http://www.iarcs.org.in/inoi/2013/inoi2013/inoi2013-qpaper.pdf

#include <iostream>
using namespace std;
 
int main() {
 
	int n,k;
	cin>>n>>k;
	int a[1000010];
	for(int i=1;i<=n;i++)
	{
		cin>>a[i];
	}
	long long sum = 0;
	a[n+1]=-10000;			//Help in case of overflow
	a[n+2]=-10000;
	a[0]=-10000;
	int i;
	//Forward phase,will follow greedy strategy
	for(i=k;i<n;)		//i denotes current position
	{
		if(a[i+1]>0)			//No prob with overflow as a[i+1]=-10000
		{
			sum+=a[i+1];
			i++;
		}else if(a[i+2]>0)		//No prob with overflow as a[i+1]=-10000
		{
			sum+=a[i+2];
			i+=2;
		}
		else
		{
			if(a[i+1]>=a[i+2]&&((i+1)<=n))		//Very Important
			{					//if i=n-1, we are gauranteed a[n]>-10000 acc to problem
				sum+=a[i+1];
				i++;
			}else if(i+2<=n)
			{
				sum+=a[i+2];
				i+=2;
			}
		}
	}
	//Backward Phase, same strategy
	int pos =i;
	while(pos!=1)
	{
		if(pos==2)
		{
			pos--;
			sum+=a[1];
		}else if(pos==3)		//Like I added for 2,3 cases in backward
		{					//Can add same for n-1,n-2 in forward
			if(a[pos-1]>0)
			{
				sum+=a[pos-1];
				pos--;
			}else
			{
				sum+=a[1];
				pos = 1;
			}
		}else
		{
			if(a[pos-1]>0)
			{
				sum+=a[pos-1];
				pos--;
			}else if(a[pos-1]>0)
			{
				sum+=a[pos-2];
				pos-=2;
			}else
			{
				if(a[pos-1]>=a[pos-2])
				{
					sum+=a[pos-1];
					pos--;
				}else
				{
					sum+=a[pos-2];
					pos-=2;
				}
			}
		}
	}
	cout<<sum;
	return 0;
}
