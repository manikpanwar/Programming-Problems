// C++ Solution to problem - The Great Escape (Basic BFS) by Manik Panwar
// Will update with adjacency lists

#include <iostream>
#include<queue>

using namespace std;

#define MAXINT 31000

int last,start;
int n,m,v;
int buildings[3501][3501];
int mindisttonode[3501],visitednode[3501]; 		//0 for not visited
queue <int> myqueue;

void bfs()
{
	mindisttonode[start]=0;
	myqueue.push(start);
	while(!myqueue.empty())
	{
		v = myqueue.front();
		myqueue.pop();
		for(int i=1;i<=n;i++)
		{
			if(buildings[v][i]==1&&!visitednode[i])
			{
				mindisttonode[i] = min(mindisttonode[i], mindisttonode[v]+1);
				visitednode[i]=1;
				myqueue.push(i);
			}
		}
	}
}
int main() {
	// your code goes here
 
	for(int i=1;i<=3500;i++)
	{
		for(int u=1;u<=3500;u++)
		buildings[i][u] = 0;
	}
 
	cin>>n>>m;
	int t1,t2;
	for(int i=0;i<m;i++)
	{
		cin>>t1>>t2;
		buildings[t1][t2]=1;
		buildings[t2][t1]=1;
	}
 
	for(int i=1;i<=n;i++)
	{	
		mindisttonode[i]=MAXINT;
		visitednode[i]=0;
	}
	//BFS
	cin>>start>>last;
	bfs();
	cout<<mindisttonode[last];
	return 0;
}
